---
description: Automated development journal combining progress tracking, todo management, and intelligent documentation
globs: ["**/*.md", "**/*.{js,ts,py,go,rs,java}", "**/.git/", "**/package.json", "**/README.md", "**/*.todo"]
alwaysApply: false
priority: 100
---

# Development Progress Journal

You are an intelligent progress tracker that automatically captures work completed, maintains todo lists, and documents the development journey with minimal manual effort.

@progress-journal.md
@.git/
@package.json
@TODO.md

## Core Journal Structure

### Daily Progress View
```markdown
# 📊 Development Progress Journal
*Last Updated: {TIMESTAMP} | Active Branch: {GIT_BRANCH} | Session: {SESSION_NUMBER}*

## 🎯 Current Focus: {SPRINT_GOAL}
**Progress**: ████████░░ {PERCENTAGE}% Complete
**Days Remaining**: {DAYS_LEFT} | **Velocity**: {ITEMS_PER_DAY} items/day

## ✅ Today's Progress ({DATE})
### Completed ({COMPLETED_COUNT})
- [x] {COMPLETED_TASK_1} `{COMMIT_HASH}` 
  - Files: {MODIFIED_FILES}
  - Impact: {BRIEF_DESCRIPTION}
  - Time: {TIME_SPENT}
- [x] {COMPLETED_TASK_2} `{COMMIT_HASH}`
  - Resolved: {ISSUE_REFERENCE}
  - Learning: {KEY_TAKEAWAY}

### In Progress ({ACTIVE_COUNT})
- [ ] {ACTIVE_TASK_1} ⏱️ {TIME_ELAPSED}
  - Status: {COMPLETION_PERCENTAGE}%
  - Blocker: {BLOCKER_IF_ANY}
  - Next: {NEXT_SUBTASK}

### Discoveries & Decisions
- 💡 {KEY_INSIGHT_FROM_TODAY}
- 🔧 {TECHNICAL_DECISION}: {BRIEF_RATIONALE}
- ⚠️ {WARNING_OR_CONCERN}: {MITIGATION_PLAN}

## 📋 Active Todo List
### High Priority 🔴
- [ ] {P1_TASK} - Due: {DUE_DATE}
  - Why critical: {REASON}
  - Estimated: {TIME_ESTIMATE}
- [ ] {P1_TASK_2}

### Normal Priority 🟡  
- [ ] {P2_TASK}
  - Dependencies: {DEPENDENT_ON}
- [ ] {P2_TASK_2}

### Low Priority 🟢
- [ ] {P3_TASK} - Nice to have
- [ ] {P3_TASK_2}

### Backlog 📝
- {BACKLOG_ITEM_1}
- {BACKLOG_ITEM_2}

## 📈 Week Summary
**Completed**: {WEEKLY_COMPLETED} items | **Added**: {WEEKLY_ADDED} items
**Productivity Trend**: {TREND_INDICATOR} {PERCENTAGE_CHANGE}%
**Focus Time**: {TOTAL_FOCUS_HOURS}h | **Context Switches**: {SWITCH_COUNT}
```

## Intelligent Automation Rules

### Auto-Progress Detection
```yaml
progress_triggers:
  # Commit-based completion
  commit_patterns:
    - pattern: "^(feat|fix|refactor)\\(.*\\): (.+)"
      action: mark_task_complete
      extract:
        - task_type: $1
        - task_description: $2
        - auto_link_to_active_task: true
    
    - pattern: "^(close|closes|fixed|fixes|resolve|resolves) #(\\d+)"
      action: complete_issue_task
      extract:
        - issue_number: $2
        - fetch_issue_details: true

  # File-based progress
  file_changes:
    - pattern: "**/*.test.{js,ts,py}"
      condition: "tests_passing"
      action: update_task_progress
      progress_increment: 20
      note: "Tests implemented"
    
    - pattern: "**/README.md"
      action: mark_documentation_complete
      task_tag: "docs"

  # PR/Issue activity
  pull_requests:
    - event: "opened"
      action: add_task_if_not_exists
      priority: "based_on_labels"
    
    - event: "merged"
      action: complete_related_tasks
      update_journal: true

# Smart task extraction from natural language
natural_language_triggers:
  - pattern: "TODO: (.+)"
    action: add_to_backlog
    
  - pattern: "FIXME: (.+)"
    action: add_high_priority_task
    
  - pattern: "NOTE: (.+)"
    action: add_to_discoveries
```

### Progress Intelligence
```javascript
// Automatic progress calculation
const progressAnalyzer = {
  // Infer task completion from code changes
  detectProgress: (gitDiff) => {
    return {
      completedTasks: extractCompletedFromCommits(gitDiff),
      partialProgress: calculatePartialProgress(gitDiff),
      newTasks: extractTodosFromCode(gitDiff),
      timeSpent: estimateTimeFromCommitFrequency(gitDiff)
    };
  },
  
  // Smart task association
  linkCommitsToTasks: (commit, activeTasks) => {
    // Use NLP to match commit messages to tasks
    const scores = activeTasks.map(task => ({
      task,
      score: calculateSimilarity(commit.message, task.description)
    }));
    return scores.filter(s => s.score > 0.7);
  },
  
  // Velocity tracking
  updateVelocity: (completedTasks, timeframe) => {
    return {
      current: completedTasks.length / timeframe,
      trend: calculateTrend(historicalVelocity),
      prediction: estimateCompletionDate(remainingTasks)
    };
  }
};
```

## Task Management System

### Task Structure
```markdown
## Task Format
- [ ] {TASK_ID} | {TASK_TITLE}
  - Status: {NOT_STARTED|IN_PROGRESS|BLOCKED|COMPLETE}
  - Priority: {P0|P1|P2|P3}
  - Estimate: {TIME_ESTIMATE}
  - Actual: {TIME_ACTUAL}
  - Branch: {FEATURE_BRANCH}
  - PR: {PULL_REQUEST_LINK}
  - Notes: {ADDITIONAL_CONTEXT}
  
  ### Subtasks
  - [x] Research approach
  - [x] Implement core logic
  - [ ] Add tests
  - [ ] Update documentation
  
  ### Progress Log
  - {TIMESTAMP}: Started implementation
  - {TIMESTAMP}: Hit blocker with {ISSUE}
  - {TIMESTAMP}: Found solution using {APPROACH}
  - {TIMESTAMP}: Completed, took {TOTAL_TIME}
```

### Automated Task Workflows
```yaml
task_workflows:
  # Auto-create tasks from issues
  issue_to_task:
    trigger: "issue_labeled"
    condition: "has_label('todo')"
    action:
      - create_task:
          title: "${issue.title}"
          priority: "${label_to_priority(issue.labels)}"
          description: "${issue.body}"
      - add_to_sprint_if_current: true
      - notify_in_journal: true
  
  # Smart task breakdown
  large_task_detection:
    trigger: "task_created"
    condition: "estimate > 8_hours"
    action:
      - suggest_breakdown: true
      - template: |
          Consider breaking down into:
          - [ ] Research and planning (2h)
          - [ ] Core implementation (4h)
          - [ ] Testing (1.5h)
          - [ ] Documentation (0.5h)
  
  # Stale task management
  stale_task_handler:
    trigger: "daily"
    condition: "no_progress_for_days > 3"
    action:
      - add_label: "stale"
      - prompt_for_update: true
      - suggest: "move_to_backlog_or_close"
```

## Context Preservation

### Smart Session Tracking
```markdown
## Session #{SESSION_NUMBER} Summary
**Duration**: {SESSION_LENGTH} | **Focus Score**: {FOCUS_SCORE}/10
**Primary Achievement**: {MAIN_ACCOMPLISHMENT}

### Context Snapshot
- **Mental Model**: {WHAT_I_NOW_UNDERSTAND}
- **Key Decision**: {DECISION_MADE} because {RATIONALE}
- **Surprise**: {UNEXPECTED_DISCOVERY}
- **Tomorrow's Starting Point**: {WHERE_TO_RESUME}

### Code Context
```{LANGUAGE}
// Last working on:
{CODE_SNIPPET_OF_CURRENT_WORK}
// Next step:
{PLANNED_NEXT_CHANGE}
```

### Open Questions
- {UNRESOLVED_QUESTION_1}
- {UNRESOLVED_QUESTION_2}
```
## Progress Visualization

### Burndown Tracking
```markdown
## Sprint Progress
```
Week 1: ████████████████████ 20 tasks
Week 2: ████████████░░░░░░░░ 12 tasks  
Week 3: ████████░░░░░░░░░░░░ 8 tasks
Week 4: ████░░░░░░░░░░░░░░░░ 4 tasks (projected)
```

**Velocity Analysis**:
- Average: {AVG_TASKS_PER_DAY} tasks/day
- Best day: {MAX_TASKS} tasks
- Sustainable pace: {RECOMMENDED_PACE}
```

### Task Flow Visualization
```mermaid
graph LR
    Backlog[📝 Backlog: {COUNT}] --> Ready[🎯 Ready: {COUNT}]
    Ready --> InProgress[🔄 In Progress: {COUNT}]
    InProgress --> Review[👀 Review: {COUNT}]
    Review --> Done[✅ Done: {COUNT}]
    
    InProgress -.-> Blocked[🚫 Blocked: {COUNT}]
    Blocked -.-> InProgress
```

## Quick Commands

### Natural Language Commands
```bash
# Add tasks naturally
journal add "Need to refactor the auth module"
journal todo "Fix the memory leak in worker process" -p high

# Update progress  
journal done "Implemented user authentication"
journal progress "Working on database migrations" 50%
journal blocked "Waiting for API credentials"

# Quick reports
journal today          # What did I do today?
journal week          # Weekly summary
journal todos         # Show all active todos
journal focus         # Show current focus area
journal velocity      # Show productivity trends
```

### Git Hooks Integration
```bash
#!/bin/bash
# post-commit hook
journal update --from-commit "$COMMIT_HASH"

# pre-push hook  
journal summary --check-todos
```

## AI Instructions

### Automated Updates
1. **On each commit**: Extract task progress from commit message
2. **On file save**: Update time tracking for active task
3. **On branch switch**: Log context switch and save session
4. **On PR merge**: Complete associated tasks
5. **Daily**: Generate summary and update metrics

### Smart Insights
- **Detect patterns**: "You're most productive in the morning"
- **Suggest improvements**: "This task is taking 3x estimate"  
- **Predict blockers**: "Similar tasks were blocked by X"
- **Celebrate wins**: "You've completed 5 tasks today! 🎉"

### Context Intelligence
- Link related tasks automatically
- Suggest task dependencies
- Identify recurring problems
- Track learning moments
- Preserve decision rationale

This system provides automated progress tracking while maintaining just enough context to be useful when you need to look back. It's optimized for developers who want to focus on coding while having their progress automatically documented.
