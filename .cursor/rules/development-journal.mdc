---
description: 
globs: 
alwaysApply: false
---
---
description: Captures development patterns, learnings, and project intelligence
globs: ["**/*"]
alwaysApply: false
---

# Development Journal & Pattern Learning

## 📚 Project Intelligence Log

### Code Patterns Discovered
```javascript
// PATTERN: Error Handling Style
// Discovered: All services use this pattern
class ServiceError extends Error {
  constructor(message, code, statusCode = 500) {
    super(message);
    this.code = code;
    this.statusCode = statusCode;
  }
}
// Usage: throw new ServiceError('User not found', 'USER_NOT_FOUND', 404);

// PATTERN: API Response Format
// Every endpoint returns this structure
{
  success: boolean,
  data?: any,
  error?: { code: string, message: string },
  metadata?: { timestamp: number, version: string }
}

// PATTERN: Async Handler Wrapper
// All routes wrapped for error catching
const asyncHandler = (fn) => (req, res, next) =>
  Promise.resolve(fn(req, res, next)).catch(next);
```
### Architecture Insights
```yaml
DISCOVERED_ARCHITECTURE:
  style: "Domain-Driven Design"
  layers:
    - controllers: "HTTP handling only"
    - services: "Business logic"
    - repositories: "Data access"
    - entities: "Domain models"
  
  conventions:
    - "Services never import controllers"
    - "Repositories return entities, not DB models"
    - "All external APIs wrapped in services"
```

## 🔍 Problem-Solution Pairs

### Solved Challenges
```markdown
PROBLEM: "Database connections exhausted under load"
SOLUTION: Implemented connection pooling with these settings:
  - max: 20
  - idleTimeoutMillis: 30000
  - connectionTimeoutMillis: 2000
RESULT: 10x improvement in concurrent request handling
FILES: database/config.ts

PROBLEM: "JWT tokens not refreshing reliably"
SOLUTION: Added mutex lock for refresh operations
LEARNING: Concurrent refresh attempts caused race conditions
CODE: See auth.service.ts:refreshToken()
```

## 💡 Technical Decisions

### Decision Record
```markdown
DATE: 2024-03-14
DECISION: "Use Redis for session storage instead of JWT"
CONTEXT: 
  - Need ability to revoke sessions
  - Horizontal scaling required
  - Mobile app needs long-lived sessions
CONSEQUENCES:
  + Can invalidate sessions instantly
  + Better session management
  - Additional infrastructure (Redis)
  - Slightly more complex
REFERENCE: ADR-001

DATE: 2024-03-15  
DECISION: "Implement soft deletes across all entities"
REASONING:
  - Audit requirements
  - Data recovery needs
  - Referential integrity
IMPLEMENTATION: 
  - Added deletedAt timestamp
  - Updated all queries to filter
  - Created restoration endpoints
```

## 🚀 Performance Discoveries

### Optimization Log
```javascript
// OPTIMIZATION: N+1 Query Fix
// BEFORE: 500ms for 100 users
const users = await User.findAll();
for (const user of users) {
  user.posts = await Post.findByUserId(user.id);
}

// AFTER: 50ms for 100 users  
const users = await User.findAll({
  include: [{ model: Post, as: 'posts' }]
});

// LEARNING: Always eager-load relationships when iterating
```

### Performance Patterns
```
IDENTIFIED_BOTTLENECKS:
1. Database queries in loops → Use includes/joins
2. Synchronous file operations → Use async versions
3. Large JSON parsing → Stream processing
4. Unindexed queries → Added indexes on foreign keys
```

## 🐛 Bug Patterns & Fixes

### Common Bug Categories
```markdown
BUG_PATTERN: "Timezone Issues"
SYMPTOMS:
  - Dates off by hours
  - Scheduling at wrong times
ROOT_CAUSE: Server in UTC, clients in various timezones
SOLUTION: 
  - Always store UTC in database
  - Convert at display layer only
  - Use moment-timezone for conversions
PREVENTION: ESLint rule for Date() usage

BUG_PATTERN: "Memory Leaks in Event Listeners"
SYMPTOMS:
  - Increasing memory usage
  - Eventual crashes
CAUSE: Not removing listeners
FIX: Always cleanup in useEffect/componentWillUnmount
```

## 📈 Development Velocity Insights

### What Speeds Us Up
```
ACCELERATORS:
✓ Consistent code patterns (30% faster)
✓ Comprehensive types (catches errors early)
✓ Good test coverage (confident refactoring)
✓ Clear naming conventions (less cognitive load)
✓ Documented decisions (no re-litigation)
```

### What Slows Us Down
```
FRICTION_POINTS:
✗ Inconsistent error handling (-20% velocity)
✗ Missing TypeScript types (-15% velocity)
✗ Unclear module boundaries (-25% velocity)
✗ Not following established patterns (-30% velocity)
```

## 🧪 Testing Insights

### Effective Test Patterns
```javascript
// PATTERN: Test Data Builders
// Discovered this reduces test maintenance by 50%
const createTestUser = (overrides = {}) => ({
  id: faker.datatype.uuid(),
  email: faker.internet.email(),
  name: faker.name.fullName(),
  ...overrides
});

// PATTERN: Integration Test Structure
describe('POST /api/users', () => {
  beforeEach(resetDatabase);
  afterEach(cleanupTestData);
  
  it('should create user with valid data', async () => {
    // Arrange
    const userData = createTestUser();
    
    // Act
    const response = await request(app)
      .post('/api/users')
      .send(userData);
    
    // Assert
    expect(response.status).toBe(201);
    expect(response.body.data.email).toBe(userData.email);
  });
});
```

## 🔧 Tooling Discoveries

### Useful Scripts/Commands
```bash
# DISCOVERED: Quickly find unused exports
npm run find-unused-exports

# LEARNED: Database migration rollback process
npm run migrate:rollback -- --steps=2

# HELPFUL: Generate TypeScript types from DB
npm run generate:types
```

## 📊 Code Quality Metrics

### Quality Indicators Tracked
```
METRICS_THAT_MATTER:
- Test coverage > 80% = fewer production bugs
- Cyclomatic complexity < 10 = maintainable
- Duplication < 3% = DRY principle
- TypeScript coverage = 100% = type safety

CORRELATION_FOUND:
- Files > 200 lines = 3x more bugs
- Functions > 50 lines = harder to test
- > 5 parameters = should be object
```

## 🎓 Learning Log

### Key Learnings
```markdown
LEARNING: "Database transactions are critical for consistency"
CONTEXT: Race condition causing duplicate records
SOLUTION: Wrap related operations in transactions
IMPACT: Zero data inconsistencies since implementation

LEARNING: "Premature optimization is evil, but not profiling is worse"
STORY: Spent 2 days optimizing wrong endpoint
LESSON: Always measure before optimizing
TOOL: Added performance monitoring
```

## 💾 Journal Maintenance

### Weekly Review Questions
1. What patterns emerged this week?
2. What slowed development down?
3. What decisions need documenting?
4. What could be automated?
5. What knowledge needs sharing?

Remember: Today's problem solution is tomorrow's pattern!
