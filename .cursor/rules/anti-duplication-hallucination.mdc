---
description: Prevents code duplication and AI hallucination through verification-first development
globs: 
alwaysApply: true
---
---
description: Optimizes terminal operations for AI agents by minimizing tool calls and maximizing efficiency
globs:
  - "**/*.sh"
  - "**/*.bash"
  - "**/Makefile"
  - "**/Dockerfile"
  - "**/*.yml"
  - "**/*.yaml"
alwaysApply: true
---

# Terminal Optimization Rules for AI Agents

## üéØ Core Principle: Fewer Calls, Better Results

### ALWAYS Chain Commands
```bash
# ‚úÖ GOOD: Single tool call
mkdir -p src/components && cd src/components && touch index.js && echo "Created component structure"

# ‚ùå BAD: Multiple tool calls
mkdir src/components
cd src/components
touch index.js
echo "Created component structure"
```

## üìã Command Patterns

### 1. State Verification First
```bash
# Before any file operation
pwd && ls -la

# Before using any tool
which npm && npm --version || echo "npm not found"

# Before git operations
git status --porcelain || echo "Not a git repo"
```

### 2. Smart Command Chaining
```bash
# Use && for sequential success-dependent commands
command1 && command2 && command3

# Use ; for independent commands
command1 ; command2 ; command3

# Use || for fallbacks
command || echo "Command failed"

# Combine for robust execution
mkdir -p dir && cd dir && echo "‚úì In directory" || echo "‚úó Failed to create/enter directory"
```

### 3. Output Optimization
```bash
# Minimize output for parsing
ls -1          # One file per line, no details
git status -s  # Short status
grep -l        # List only filenames
find . -name "*.js" -type f | head -20  # Limit results

# Silent operations when output not needed
npm install --silent
git add . 2>/dev/null
rm -rf dir 2>&1 >/dev/null

# Get only what you need
cat package.json | jq -r '.dependencies | keys[]'  # Just dependency names
git log --oneline -5  # Last 5 commits, concise
```

## üîÑ Common Task Templates

### Git Operations
```bash
# Complete feature branch workflow (1 call)
git checkout -b feature/name && \
echo "Implementation" > feature.js && \
git add . && \
git commit -m "Add feature" && \
git push -u origin feature/name || echo "Git workflow failed at: $?"

# Check and clean (1 call)
git status --porcelain && git diff --stat || echo "Working directory clean"
```

### Project Setup
```bash
# Full project initialization (1 call)
mkdir -p project/{src,tests,docs} && \
cd project && \
npm init -y && \
npm install --save-dev jest eslint && \
echo "node_modules/" > .gitignore && \
git init && \
git add . && \
git commit -m "Initial commit" || echo "Setup failed"
```

### File Operations
```bash
# Create multiple files with content (1 call)
cat << 'EOF' > config.js
module.exports = {
  env: 'development'
};
EOF && \
cat << 'EOF' > index.js
const config = require('./config');
console.log(config);
EOF && echo "‚úì Files created"

# Search and process (1 call)
find . -name "*.test.js" -type f | xargs grep -l "describe" | head -10
```

### Dependency Management
```bash
# Install and verify (1 call)
npm install express && npm list express || yarn add express && yarn list express

# Update and audit (1 call)
npm update && npm audit --audit-level=moderate || echo "Update/audit had issues"
```

## üõ°Ô∏è Error Handling Patterns

### Always Include Verification
```bash
# Pattern: action && success_indicator || failure_indicator
cd /path/to/dir && echo "‚úì Moved to dir" || echo "‚úó Failed to change directory"

# Check exit codes when needed
command ; [ $? -eq 0 ] && echo "Success" || echo "Failed with code $?"
```

### Safe Destructive Operations
```bash
# Confirm before destroying
[ -d "./build" ] && rm -rf ./build && echo "‚úì Cleaned build" || echo "‚úì No build to clean"

# Backup before modifying
[ -f "config.json" ] && cp config.json config.json.bak && echo "‚úì Backed up config"
```

## üìä Efficiency Rules

### 1. Batch Similar Operations
```bash
# ‚úÖ GOOD: Process all files at once
find . -name "*.js" -type f -exec prettier --write {} \;

# ‚ùå BAD: Individual file processing
prettier --write file1.js
prettier --write file2.js
prettier --write file3.js
```

### 2. Use Command Substitution
```bash
# Get and use info in one call
echo "Latest commit: $(git log -1 --format=%H)"
npm version $(git describe --tags --abbrev=0)
```

### 3. Minimize Directory Changes
```bash
# ‚úÖ GOOD: Use absolute/relative paths
mkdir -p ./src/components && touch ./src/components/index.js

# ‚ùå BAD: Excessive cd commands
cd src
mkdir components
cd components
touch index.js
cd ../../..
```

## üé™ Environment Checks

### Start Sessions With Context
```bash
# Quick environment check (1 call)
echo "=== Environment ===" && \
pwd && \
echo "Node: $(node -v 2>/dev/null || echo 'not installed')" && \
echo "Git: $(git --version 2>/dev/null || echo 'not installed')" && \
echo "Branch: $(git branch --show-current 2>/dev/null || echo 'not in git repo')" && \
echo "================="
```

## ‚ö° Performance Tips

### 1. Prefer Built-in Commands
```bash
# Use shell built-ins when possible
[[ -f file.txt ]] && echo "exists"  # Faster than: test -f file.txt
```

### 2. Avoid Unnecessary Cats
```bash
# ‚úÖ GOOD
grep "pattern" file.txt

# ‚ùå BAD
cat file.txt | grep "pattern"
```

### 3. Use Appropriate Tools
```bash
# For JSON: use jq
cat package.json | jq '.scripts'

# For counting: use wc
find . -name "*.js" | wc -l

# For text processing: use awk/sed
cat data.csv | awk -F',' '{print $1}'
```

## üöÄ Common Workflows

### Development Cycle
```bash
# Complete test-and-commit cycle (1 call)
npm test && \
npm run lint && \
git add . && \
git commit -m "Update: $(git diff --staged --name-only | head -1)" && \
echo "‚úì Tests passed, committed changes" || echo "‚úó Workflow failed"
```

### Debugging Information
```bash
# Gather all debug info (1 call)
echo "=== Debug Info ===" && \
echo "PWD: $(pwd)" && \
echo "Files: $(ls -1 | wc -l)" && \
echo "Git status: $(git status -s | wc -l) changes" && \
echo "Last error: $(tail -1 npm-debug.log 2>/dev/null || echo 'none')" && \
echo "==============="
```

## üìè Rule Summary

1. **Chain commands** with && or ; to reduce tool calls
2. **Verify state** before operations
3. **Optimize output** for what you actually need
4. **Handle errors** gracefully with || fallbacks
5. **Batch operations** when processing multiple items
6. **Use templates** for common workflows
Remember: Every terminal call costs time and tokens. Make each one count!
