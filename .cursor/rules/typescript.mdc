---
description: TypeScript best practices, patterns, and type system mastery for modern applications
alwaysApply: false
---
# TypeScript Best Practices

Comprehensive guide for TypeScript development with focus on type safety, performance, and maintainability.

## 1. Type System Mastery

### 1.1 Type Inference and Annotations

```typescript
// Let TypeScript infer when obvious
const numbers = [1, 2, 3]; // number[]
const config = { host: 'localhost', port: 3000 }; // inferred shape

// Annotate when inference isn't sufficient
const processValue = <T extends { id: string }>(value: T): T & { processed: true } => {
  return { ...value, processed: true };
};

// Use satisfies for type checking without widening
const routes = {
  home: '/',
  users: '/users',
  profile: '/users/:id'
} satisfies Record<string, string>;
```

### 1.2 Discriminated Unions and Type Narrowing

```typescript
// Discriminated unions for state management
type AsyncState<T> = 
  | { status: 'idle' }
  | { status: 'loading' }
  | { status: 'success'; data: T }
  | { status: 'error'; error: Error };

// Type guards for narrowing
function isSuccess<T>(state: AsyncState<T>): state is Extract<AsyncState<T>, { status: 'success' }> {
  return state.status === 'success';
}

// Pattern matching with exhaustive checks
function handleState<T>(state: AsyncState<T>): string {
  switch (state.status) {
    case 'idle': return 'Ready';
    case 'loading': return 'Loading...';
    case 'success': return `Data: ${JSON.stringify(state.data)}`;
    case 'error': return `Error: ${state.error.message}`;
    default: {
      const _exhaustive: never = state;
      return _exhaustive;
    }
  }
}
```

### 1.3 Advanced Type Patterns

```typescript
// Conditional types
type IsArray<T> = T extends readonly any[] ? true : false;
type UnwrapPromise<T> = T extends Promise<infer U> ? U : T;

// Mapped types with modifiers
type DeepReadonly<T> = {
  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];
};

// Template literal types
type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';
type APIEndpoint<M extends HTTPMethod> = `/api/${Lowercase<M>}/${string}`;

// Branded types for nominal typing
type UserId = string & { __brand: 'UserId' };
type PostId = string & { __brand: 'PostId' };

const createUserId = (id: string): UserId => id as UserId;
```

### 1.4 Utility Type Cookbook

```typescript
// Deep partial with arrays
type DeepPartial<T> = T extends readonly any[] ? T : {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

// Type-safe object paths
type Path<T> = T extends object ? {
  [K in keyof T]: K extends string 
    ? T[K] extends object 
      ? K | `${K}.${Path<T[K]>}`
      : K
    : never;
}[keyof T] : never;

// Type-safe event emitter
type EventMap = Record<string, any>;
type EventKey<T extends EventMap> = string & keyof T;
type EventReceiver<T> = (params: T) => void;

interface Emitter<T extends EventMap> {
  on<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void;
  emit<K extends EventKey<T>>(eventName: K, params: T[K]): void;
}
```

## 2. Strict Mode Best Practices

### 2.1 Null Safety

```typescript
// Handle null/undefined explicitly
interface User {
  id: string;
  name: string;
  email?: string; // Optional
  metadata: Record<string, unknown> | null; // Nullable
}

// Non-null assertion when you're certain
function processUser(user: User | null) {
  if (!user) throw new Error('User required');
  
  // TypeScript knows user is non-null here
  console.log(user.name.toUpperCase());
  
  // Optional chaining for safety
  const domain = user.email?.split('@')[1];
}

// Nullish coalescing
const getDisplayName = (user: User) => {
  return user.name ?? user.email ?? 'Anonymous';
};
```

### 2.2 Type Assertions and Guards

```typescript
// Avoid type assertions, prefer type guards
function isUser(value: unknown): value is User {
  return (
    typeof value === 'object' &&
    value !== null &&
    'id' in value &&
    'name' in value &&
    typeof value.id === 'string' &&
    typeof value.name === 'string'
  );
}

// When assertions are necessary, be explicit
const config = JSON.parse(configString) as unknown;
if (!isValidConfig(config)) {
  throw new Error('Invalid configuration');
}
```

## 3. Architecture Patterns

### 3.1 Dependency Injection

```typescript
// Token-based DI
const TOKENS = {
  Logger: Symbol('Logger'),
  Database: Symbol('Database'),
  Cache: Symbol('Cache'),
} as const;

interface Logger {
  log(message: string): void;
}

interface Container {
  get<T>(token: symbol): T;
  bind<T>(token: symbol, factory: () => T): void;
}

// Usage with decorators
class UserService {
  constructor(
    @inject(TOKENS.Logger) private logger: Logger,
    @inject(TOKENS.Database) private db: Database
  ) {}
}
```

### 3.2 Repository Pattern

```typescript
// Generic repository interface
interface Repository<T, ID = string> {
  findById(id: ID): Promise<T | null>;
  findAll(filter?: Partial<T>): Promise<T[]>;
  save(entity: T): Promise<T>;
  delete(id: ID): Promise<void>;
}

// Type-safe implementation
class UserRepository implements Repository<User, string> {
  async findById(id: string): Promise<User | null> {
    const result = await db.query<User>('SELECT * FROM users WHERE id = ?', [id]);
    return result[0] || null;
  }
  
  async findAll(filter?: Partial<User>): Promise<User[]> {
    // Implementation with type-safe query building
  }
}
```

## 4. Error Handling

### 4.1 Result Type Pattern

```typescript
// Result monad for explicit error handling
type Result<T, E = Error> = 
  | { ok: true; value: T }
  | { ok: false; error: E };

class ResultWrapper<T, E = Error> {
  constructor(private result: Result<T, E>) {}
  
  static ok<T>(value: T): ResultWrapper<T, never> {
    return new ResultWrapper({ ok: true, value });
  }
  
  static err<E>(error: E): ResultWrapper<never, E> {
    return new ResultWrapper({ ok: false, error });
  }
  
  map<U>(fn: (value: T) => U): ResultWrapper<U, E> {
    if (this.result.ok) {
      return ResultWrapper.ok(fn(this.result.value));
    }
    return this as any;
  }
  
  flatMap<U>(fn: (value: T) => ResultWrapper<U, E>): ResultWrapper<U, E> {
    if (this.result.ok) {
      return fn(this.result.value);
    }
    return this as any;
  }
  
  unwrapOr(defaultValue: T): T {
    return this.result.ok ? this.result.value : defaultValue;
  }
}
```

### 4.2 Custom Error Types

```typescript
// Error hierarchy with discriminated unions
type AppError =
  | { type: 'ValidationError'; field: string; message: string }
  | { type: 'NotFoundError'; resource: string; id: string }
  | { type: 'UnauthorizedError'; reason: string }
  | { type: 'NetworkError'; code: string; retryable: boolean };

// Type-safe error handling
function handleError(error: AppError): number {
  switch (error.type) {
    case 'ValidationError': return 400;
    case 'NotFoundError': return 404;
    case 'UnauthorizedError': return 401;
    case 'NetworkError': return error.retryable ? 503 : 500;
  }
}
```

## 5. Performance and Optimization

### 5.1 Type-Level Performance

```typescript
// Avoid deep type computations
type SimpleUnion = 'a' | 'b' | 'c'; // Good
type ComplexUnion = DeepPartial<DeepReadonly<HugeType>>; // Avoid in hot paths

// Use interface extension for better performance
interface Base {
  id: string;
  createdAt: Date;
}

interface User extends Base { // Better performance than intersection
  name: string;
  email: string;
}

// Lazy type evaluation
type LazyType<T> = T extends unknown ? ActualComplexType<T> : never;
```

### 5.2 Const Contexts and Literal Types

```typescript
// Use const assertions for literal types
const config = {
  api: 'https://api.example.com',
  retries: 3,
  timeout: 5000,
} as const;

// Tuple types with const
const tuple = [1, 'hello', true] as const; // readonly [1, "hello", true]

// Enum alternatives with const
const Status = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
} as const;

type Status = typeof Status[keyof typeof Status];
```

## 6. Testing Strategies

### 6.1 Type Testing

```typescript
// Type-level unit tests
type Assert<T extends true> = T;
type IsTrue<T extends true> = T;
type IsFalse<T extends false> = T;
type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? true : false;

// Test your types
type test_user_keys = Assert<Equal<keyof User, 'id' | 'name' | 'email'>>;
type test_async_state = Assert<Equal<AsyncState<string>, { status: 'idle' } | { status: 'loading' } | { status: 'success'; data: string } | { status: 'error'; error: Error }>>;
```

### 6.2 Mock Types

```typescript
// Type-safe mocking
type DeepMockProxy<T> = {
  [K in keyof T]: T[K] extends (...args: any[]) => infer R
    ? jest.MockedFunction<T[K]>
    : T[K] extends object
    ? DeepMockProxy<T[K]>
    : T[K];
};

function createMock<T>(): DeepMockProxy<T> {
  return new Proxy({} as DeepMockProxy<T>, {
    get: (target, prop) => {
      if (!target[prop]) {
        target[prop] = jest.fn();
      }
      return target[prop];
    },
  });
}
```

## 7. Module System and Declarations

### 7.1 Declaration Files

```typescript
// ambient-modules.d.ts
declare module '*.css' {
  const content: Record<string, string>;
  export default content;
}

declare module 'legacy-library' {
  export function legacyFunction(input: string): number;
  export interface LegacyOptions {
    timeout?: number;
    retries?: number;
  }
}

// global augmentation
declare global {
  interface Window {
    __APP_CONFIG__: {
      apiUrl: string;
      version: string;
    };
  }
}
```

### 7.2 Module Augmentation

```typescript
// Extend existing modules
declare module 'express' {
  interface Request {
    user?: AuthenticatedUser;
    session?: SessionData;
  }
}

// Extend built-in types
interface Array<T> {
  groupBy<K extends keyof T>(key: K): Record<string, T[]>;
}
```

## 8. React/JSX Patterns

### 8.1 Component Patterns

```typescript
// Polymorphic components
type PolymorphicRef<C extends React.ElementType> = React.ComponentPropsWithRef<C>['ref'];

type PolymorphicProps<C extends React.ElementType, Props = {}> = Props &
  Omit<React.ComponentPropsWithoutRef<C>, keyof Props> & {
    as?: C;
    ref?: PolymorphicRef<C>;
  };

const Button = <C extends React.ElementType = 'button'>({
  as,
  ...props
}: PolymorphicProps<C, { variant?: 'primary' | 'secondary' }>) => {
  const Component = as || 'button';
  return <Component {...props} />;
};
```

### 8.2 Hook Patterns

```typescript
// Type-safe context
function createContext<T extends {} | null>() {
  const Context = React.createContext<T | undefined>(undefined);
  
  function useContext() {
    const context = React.useContext(Context);
    if (context === undefined) {
      throw new Error('useContext must be used within Provider');
    }
    return context;
  }
  
  return [Context.Provider, useContext] as const;
}

// Generic hooks
function useAsync<T>(
  asyncFn: () => Promise<T>,
  deps: React.DependencyList = []
): AsyncState<T> {
  const [state, setState] = useState<AsyncState<T>>({ status: 'idle' });
  
  useEffect(() => {
    setState({ status: 'loading' });
    
    asyncFn()
      .then(data => setState({ status: 'success', data }))
      .catch(error => setState({ status: 'error', error }));
  }, deps);
  
  return state;
}
```

## 9. Configuration and Build

### 9.1 TSConfig Best Practices

```json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    
    // Strict settings
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "exactOptionalPropertyTypes": true,
    "noPropertyAccessFromIndexSignature": true,
    
    // Code quality
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    
    // Emit
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "removeComments": false,
    
    // Paths
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@components/*": ["src/components/*"],
      "@utils/*": ["src/utils/*"]
    }
  }
}
```

### 9.2 Type-Safe Environment

```typescript
// env.ts
import { z } from 'zod';

const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production', 'test']),
  API_URL: z.string().url(),
  API_KEY: z.string().min(1),
  PORT: z.string().transform(Number).pipe(z.number().positive()),
  ENABLE_ANALYTICS: z.string().transform(v => v === 'true'),
});

export const env = envSchema.parse(process.env);

// Type declaration for process.env
declare global {
  namespace NodeJS {
    interface ProcessEnv extends z.infer<typeof envSchema> {}
  }
}
```

## 10. Documentation and Code Quality

### 10.1 TSDoc Standards

```typescript
/**
 * Processes user data and returns a normalized result.
 * 
 * @param data - Raw user data from the API
 * @param options - Processing options
 * @returns Normalized user object
 * 
 * @example
 * ```ts
 * const user = await processUser(rawData, { validate: true });
 * ```
 * 
 * @throws {ValidationError} When data validation fails
 * @throws {NetworkError} When API request fails
 * 
 * @see {@link https://example.com/docs/user-processing}
 * @since 2.0.0
 * @deprecated Use `processUserV2` instead - will be removed in 3.0.0
 */
export async function processUser(
  data: unknown,
  options?: ProcessOptions
): Promise<User> {
  // Implementation
}

// Type documentation
/**
 * Represents a user in the system.
 * @interface
 */
export interface User {
  /** Unique identifier */
  id: string;
  
  /** User's display name */
  name: string;
  
  /** 
   * Email address
   * @pattern ^[^\s@]+@[^\s@]+\.[^\s@]+$
   */
  email: string;
  
  /** Account creation timestamp */
  createdAt: Date;
}
```

### 10.2 Code Review Checklist

```typescript
// Pre-commit checklist enforced via hooks
export const codeReviewChecklist = {
  types: [
    'No any types without justification comment',
    'All functions have explicit return types',
    'Interfaces preferred over type aliases for objects',
    'Proper null/undefined handling',
    'No type assertions without validation'
  ],
  
  errorHandling: [
    'All promises have error handling',
    'Custom errors extend base Error class',
    'Error messages are descriptive',
    'No silent failures'
  ],
  
  performance: [
    'No unnecessary type computations',
    'Const assertions used for literals',
    'No circular dependencies',
    'Bundle size impact considered'
  ],
  
  security: [
    'User input validated',
    'No any in external data handling',
    'Sensitive data not logged',
    'Type-safe environment variables'
  ]
};
```

## 11. Migration and Adoption

### 11.1 JavaScript to TypeScript Migration

```typescript
// Incremental migration with JSDoc
/** @type {import('./types').User} */
const user = {
  id: '123',
  name: 'John',
  email: 'john@example.com'
};

// Allow JS with checkJs
// @ts-check
/** @param {string} name */
function greet(name) {
  return `Hello, ${name}!`;
}

// Progressive typing
type TODO = any; // Mark for future typing
interface PartiallyTypedAPI {
  getUser(id: string): Promise<TODO>;
  updateUser(id: string, data: TODO): Promise<void>;
}
```

### 11.2 Common Pitfalls and Solutions

```typescript
// Pitfall: Index signature with specific properties
interface BadConfig {
  port: number;
  [key: string]: string; // Error: port is number
}

// Solution: Use union types or separate interfaces
interface GoodConfig {
  port: number;
  [key: string]: string | number;
}

// Pitfall: Forgetting to handle undefined in strict mode
const users = [{ id: 1, name: 'John' }];
const user = users.find(u => u.id === 2);
console.log(user.name); // Error: Object is possibly 'undefined'

// Solution: Proper guards
if (user) {
  console.log(user.name);
}

// Pitfall: Mutating readonly arrays
const readonlyArray: readonly number[] = [1, 2, 3];
readonlyArray.push(4); // Error

// Solution: Create new array
const newArray = [...readonlyArray, 4];

// Pitfall: Incorrect type narrowing
function processValue(value: string | number) {
  if (typeof value === 'string' || typeof value === 'number') {
    // TypeScript still sees value as string | number
    return value.toFixed(2); // Error
  }
}

// Solution: Proper type guards
function processValueCorrect(value: string | number) {
  if (typeof value === 'number') {
    return value.toFixed(2);
  }
  return parseFloat(value).toFixed(2);
}
```

### 11.3 Performance Monitoring

```typescript
// Type-safe performance markers
enum PerformanceMark {
  FetchStart = 'fetch-start',
  FetchEnd = 'fetch-end',
  RenderStart = 'render-start',
  RenderEnd = 'render-end'
}

class PerformanceMonitor {
  private marks = new Map<PerformanceMark, number>();
  
  mark(name: PerformanceMark): void {
    this.marks.set(name, performance.now());
  }
  
  measure(name: string, start: PerformanceMark, end: PerformanceMark): number {
    const startTime = this.marks.get(start);
    const endTime = this.marks.get(end);
    
    if (!startTime || !endTime) {
      throw new Error(`Missing marks for measurement: ${name}`);
    }
    
    const duration = endTime - startTime;
    performance.measure(name, start, end);
    
    return duration;
  }
}
```

### Do's ✅
- Use `unknown` instead of `any`
- Enable all strict compiler options
- Write type guards for runtime validation
- Use discriminated unions for state
- Leverage const assertions
- Test your types with type-level tests
- Use branded types for domain modeling

### Don'ts ❌
- Don't use `any` without comment justification
- Don't use `!` non-null assertion without checks
- Don't overuse type assertions
- Don't create overly complex generic types
- Don't ignore compiler errors
- Don't mix `null` and `undefined` unnecessarily

### Type Utilities Cheatsheet
```typescript
// Common patterns
type Nullable<T> = T | null;
type Optional<T> = T | undefined;
type Maybe<T> = T | null | undefined;
type ValueOf<T> = T[keyof T];
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : never;
type UnpackArray<T> = T extends (infer U)[] ? U : T;
type Flatten<T> = T extends object ? { [K in keyof T]: T[K] } : T;
```