---
description: 
globs: 
alwaysApply: false
---
---
description: Maintains continuity and context across multiple work sessions
globs: ["**/*"]
alwaysApply: false
---

# Session Coordination & Continuity

## üîÑ Session State Tracking

### Active Session Format
```yaml
SESSION_STATE:
  id: "2024-03-14-auth-implementation"
  feature: "User Authentication"
  branch: "feature/auth-jwt"
  status: "IN_PROGRESS"
  
PROGRESS:
  completed:
    - JWT token generation
    - User login endpoint
    - Password hashing
  in_progress:
    - Refresh token logic
  blocked:
    - Need decision on token expiry
  next:
    - Implement logout
    - Add rate limiting
```

## üìç Checkpoint System

### Create Checkpoint Before:
- Major refactoring
- Switching to different feature
- End of work session
- Complex debugging starts

### Checkpoint Format:
```javascript
CHECKPOINT: "Before refactoring auth service"
STATE: {
  working_files: ["auth.service.ts", "user.controller.ts"],
  last_test_status: "PASSING",
  git_status: "2 files modified, 0 staged",
  key_decisions: ["Using JWT", "15min token expiry"],
  rollback_point: "commit:a3f4b5c"
}
```

## üéØ Context Handoff

### End of Session Protocol
```markdown
## Session Summary [Date/Time]

### Completed ‚úì
- Implemented user registration with validation
- Added password hashing with bcrypt
- Created JWT token generation

### In Progress üîÑ
- Working on refresh token endpoint
- File: `auth.controller.ts` line 47

### Blocked ‚ö†Ô∏è
- Waiting for: Decision on refresh token storage
- Options considered: Redis vs Database

### Next Session üìã
1. Complete refresh token implementation
2. Add logout functionality
3. Test edge cases

### Key Context
- Using @nestjs/jwt package
- Tokens expire in 15 minutes
- Refresh tokens last 7 days
```

## üîó Dependency Tracking

### Track What Affects What
```
DEPENDENCY_MAP:
  auth.service.ts:
    imports: ["jwt.service", "user.service"]
    affects: ["auth.controller", "auth.guard"]
    tests: ["auth.service.test.ts"]
    
  user.model.ts:
    affects: ["*user*", "auth.service"]
    migration: "20240314_add_user_table.sql"
```

### Change Impact Analysis
```
CHANGE: Modified User model email validation
IMPACTS:
  - user.service.ts: Update createUser validation
  - auth.service.ts: Check login email handling
  - user.test.ts: Update test cases
  - API docs: Reflect new validation rules
```

## üí≠ Decision Memory

### Record Key Decisions
```markdown
DECISION_LOG:
  
2024-03-14 14:30
- DECISION: Use JWT instead of sessions
- REASON: Stateless, scalable, mobile-friendly
- TRADEOFFS: Can't revoke easily, need refresh strategy
- ALTERNATIVE: Considered Redis sessions

2024-03-14 15:45  
- DECISION: 15-minute access token expiry
- REASON: Balance security vs UX
- REFERENCE: OWASP recommends 5-30 minutes
```

### Pattern Recognition
```
LEARNED_PATTERNS:
- This project prefers async/await over promises
- Error handling uses custom AppError class
- All endpoints return { success, data, error } format
- Testing uses jest with supertest for endpoints
```

## üö¶ Work State Indicators

### Current Focus
```javascript
// WORKING_ON: Adding validation to refresh token endpoint
// CONTEXT: User reported tokens not refreshing properly
// HYPOTHESIS: Race condition when token expires during refresh
// TESTING: Adding concurrent request tests
```

### Mental Stack
```
STACK:
1. [CURRENT] Fixing refresh token race condition
2. [PAUSED] Implement logout endpoint
3. [TODO] Add rate limiting
4. [BACKLOG] OAuth integration
```

## üìä Progress Tracking

### Feature Progress
```
Authentication Module: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 80%
  ‚îú‚îÄ Login: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100% ‚úì
  ‚îú‚îÄ Register: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100% ‚úì
  ‚îú‚îÄ JWT Generation: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100% ‚úì
  ‚îú‚îÄ Refresh Token: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 80% 
  ‚îú‚îÄ Logout: ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%
  ‚îî‚îÄ Rate Limiting: ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%
```

### Time Investment
```
FEATURE_TIME:
  research: 2h (JWT best practices)
  implementation: 6h
  debugging: 1.5h
  testing: 2h
  refactoring: 1h
  
BLOCKERS_TIME:
  waiting_for_decisions: 1h
  environment_issues: 0.5h
```

## üîç Quick Context Recovery

### Session Resume Commands
```
"Continue from last session" ‚Üí
  1. Load last checkpoint
  2. Show progress summary
  3. Display current task
  4. List immediate next steps

"What was I working on?" ‚Üí
  - Feature: [Name]
  - File: [Current file + line]
  - Task: [Specific task]
  - Context: [Why doing this]
```

## üé™ Collaboration Context

### Team Handoff Format
```markdown
HANDOFF TO: @teammate

CONTEXT:
- Working on: JWT refresh token implementation
- Branch: feature/auth-jwt
- PR: #123 (draft)

CURRENT STATE:
- Login works perfectly
- Refresh endpoint 80% done
- Need to handle concurrent refresh

WATCH OUT:
- Token expiry edge case at exactly 15 min
- Database connection pool gets exhausted under load

NEXT STEPS:
1. Complete refresh token error handling
2. Add integration tests
3. Update API documentation
```

## üíæ Session Persistence

### Auto-Save Triggers
- Every significant completion
- Before major changes
- On error occurrence
- At regular intervals (30 min)

### Recovery Protocol
```
IF session_crashed:
  1. Load last checkpoint
  2. Check git status
  3. Verify test status
  4. Resume from safe state
```

Remember: Good coordination means never losing context or repeating work!